#
#-----------------------------------------------------------------------
#
# This file defines a function that sets various parameters needed when
# performing verification.  The way these parameters are set depends on
# the field being verified and, if the field is accumulated precipitation,
# the accumulation period (both of which are inputs to this function).
#
# As of 20220928, the verification tasks in the SRW App workflow use the
# MET/METplus software (MET = Model Evaluation Tools) developed at the
# DTC (Developmental Testbed Center).
#
#-----------------------------------------------------------------------
#
function set_vx_params() {
#
#-----------------------------------------------------------------------
#
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#
#-----------------------------------------------------------------------
#
  { save_shell_opts; set -u +x; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Get the full path to the file in which this script/function is located
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#
#-----------------------------------------------------------------------
#
  local scrfunc_fp=$( $READLINK -f "${BASH_SOURCE[0]}" )
  local scrfunc_fn=$( basename "${scrfunc_fp}" )
  local scrfunc_dir=$( dirname "${scrfunc_fp}" )
#
#-----------------------------------------------------------------------
#
# Get the name of this function.
#
#-----------------------------------------------------------------------
#
  local func_name="${FUNCNAME[0]}"
#
#-----------------------------------------------------------------------
#
# Specify the set of valid argument names for this script/function.  Then
# process the arguments provided to this script/function (which should
# consist of a set of name-value pairs of the form arg1="value1", etc).
#
#-----------------------------------------------------------------------
#
  local valid_args=( \
        "obtype" \
        "field" \
        "accum_hh" \
        "outvarname_grid_or_point" \
        "outvarname_field_is_APCPgt01h" \
        "outvarname_fieldname_in_obs_input" \
        "outvarname_fieldname_in_fcst_input" \
        "outvarname_fieldname_in_MET_output" \
        "outvarname_fieldname_in_MET_filedir_names" \
        )
  process_args valid_args "$@"
#
#-----------------------------------------------------------------------
#
# For debugging purposes, print out values of arguments passed to this
# script.  Note that these will be printed out only if VERBOSE is set to
# TRUE.
#
#-----------------------------------------------------------------------
#
  print_input_args valid_args
#
#-----------------------------------------------------------------------
#
# Declare local variables.
#
#-----------------------------------------------------------------------
#
  local _grid_or_point_ \
        _field_is_APCPgt01h_ \
        fieldname_in_obs_input \
        fieldname_in_fcst_input \
        fieldname_in_MET_output \
        fieldname_in_MET_filedir_names
#
#-----------------------------------------------------------------------
#
# Make sure that accum_hh is a 2-digit integer.
#
#-----------------------------------------------------------------------
#
  if [[ ! "${accum_hh}" =~ ^[0-9]{2}$ ]]; then
    print_err_msg_exit "\
The accumulation (accum_hh) must be a 2-digit integer:
  accum_hh = \"${accum_hh}\""
  fi
#
#-----------------------------------------------------------------------
#
# Set the parameters.  Definitions:
#
# grid_or_point:
# String that is set to either "grid" or "point" depending on whether
# the field in consideration has obs that are gridded or point-based.
#
# field_is_APCPgt01h:
# Flag that specifies whether the input field and accumulation together
# represent accumulated precipitation with accumulation period greater
# than 1 hour.
#
# fieldname_in_obs_input:
# String used to search for the field in the input observation files
# read in by MET.
#
# fieldname_in_fcst_input:
# String used to search for the field in the input forecast files read
# in by MET.
#
# fieldname_in_MET_output:
# String that will be used in naming arrays defined in MET output files
# (e.g. NetCDF, stat, etc).
#
# fieldname_in_MET_filedir_names:
# String that will be used in naming directories and files (e.g. NetCDF
# files, stat files, log files, staging directories) generated by MET
# or METplus.
#
#-----------------------------------------------------------------------
#
  _grid_or_point_="FALSE"
  _field_is_APCPgt01h_="FALSE"
  fieldname_in_obs_input=""
  fieldname_in_fcst_input=""
  fieldname_in_MET_output=""
  fieldname_in_MET_filedir_names=""

  case "${obtype}" in

    "CCPA")

      _grid_or_point_="grid"
      case "${field}" in

        "APCP")
          fieldname_in_obs_input="${field}"
          fieldname_in_fcst_input="${field}"
          fieldname_in_MET_output="${field}_${accum_hh}"
          fieldname_in_MET_filedir_names="${field}${accum_hh}h"
          if [ "${accum_hh}" -gt "01" ]; then
            _field_is_APCPgt01h_="TRUE"
          fi
          ;;

        *)
          print_err_msg_exit "\
A method for setting verification parameters has not been specified for
this observation type (obtype) and field (field) combination:
  obtype = \"${obtype}\"
  field = \"${field}\""
          ;;

      esac
      ;;

    "NOHRSC")

      _grid_or_point_="grid"
      case "${field}" in

        "ASNOW")
          fieldname_in_obs_input="${field}"
          fieldname_in_fcst_input="${field}"
          fieldname_in_MET_output="${field}_${accum_hh}"
          fieldname_in_MET_filedir_names="${field}"
          ;;

        *)
          print_err_msg_exit "\
A method for setting verification parameters has not been specified for
this observation type (obtype) and field (field) combination:
  obtype = \"${obtype}\"
  field = \"${field}\""
          ;;

      esac
      ;;

    "MRMS")

      _grid_or_point_="grid"
      case "${field}" in

        "REFC")
          fieldname_in_obs_input="MergedReflectivityQCComposite"
          fieldname_in_fcst_input="${field}"
          fieldname_in_MET_output="${field}"
          fieldname_in_MET_filedir_names="${field}"
          ;;

        "RETOP")
          fieldname_in_obs_input="EchoTop18"
          fieldname_in_fcst_input="${field}"
          fieldname_in_MET_output="${field}"
          fieldname_in_MET_filedir_names="${field}"
          ;;

        *)
          print_err_msg_exit "\
A method for setting verification parameters has not been specified for
this observation type (obtype) and field (field) combination:
  obtype = \"${obtype}\"
  field = \"${field}\""
          ;;

      esac
      ;;

    "NDAS")

      _grid_or_point_="point"
      case "${field}" in

        "SFC")
          fieldname_in_obs_input=""
          fieldname_in_fcst_input=""
          fieldname_in_MET_output="${field}"
          fieldname_in_MET_filedir_names="${field}"
          ;;

        "UPA")
          fieldname_in_obs_input=""
          fieldname_in_fcst_input=""
          fieldname_in_MET_output="${field}"
          fieldname_in_MET_filedir_names="${field}"
          ;;

        *)
          print_err_msg_exit "\
A method for setting verification parameters has not been specified for
this observation type (obtype) and field (field) combination:
  obtype = \"${obtype}\"
  field = \"${field}\""
          ;;

      esac
      ;;

    *)
      print_err_msg_exit "\
A method for setting verification parameters has not been specified for
this observation type (obtype):
  obtype = \"${obtype}\""
      ;;

  esac
#
#-----------------------------------------------------------------------
#
# Set output variables.
#
#-----------------------------------------------------------------------
#
  if [ ! -z "${outvarname_grid_or_point}" ]; then
    printf -v ${outvarname_grid_or_point} "%s" "${_grid_or_point_}"
  fi

  if [ ! -z "${outvarname_field_is_APCPgt01h}" ]; then
    printf -v ${outvarname_field_is_APCPgt01h} "%s" "${_field_is_APCPgt01h_}"
  fi

  if [ ! -z "${outvarname_fieldname_in_obs_input}" ]; then
    printf -v ${outvarname_fieldname_in_obs_input} "%s" "${fieldname_in_obs_input}"
  fi

  if [ ! -z "${outvarname_fieldname_in_fcst_input}" ]; then
    printf -v ${outvarname_fieldname_in_fcst_input} "%s" "${fieldname_in_fcst_input}"
  fi

  if [ ! -z "${outvarname_fieldname_in_MET_output}" ]; then
    printf -v ${outvarname_fieldname_in_MET_output} "%s" "${fieldname_in_MET_output}"
  fi

  if [ ! -z "${outvarname_fieldname_in_MET_filedir_names}" ]; then
    printf -v ${outvarname_fieldname_in_MET_filedir_names} "%s" "${fieldname_in_MET_filedir_names}"
  fi
#
#-----------------------------------------------------------------------
#
# Restore the shell options saved at the beginning of this script/function.
#
#-----------------------------------------------------------------------
#
  { restore_shell_opts; } > /dev/null 2>&1

}
